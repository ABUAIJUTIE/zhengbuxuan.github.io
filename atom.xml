<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhengbuxuan.github.io/"/>
  <updated>2017-08-29T14:34:54.000Z</updated>
  <id>https://zhengbuxuan.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS 多线程 GCD Swift 3</title>
    <link href="https://zhengbuxuan.github.io/2017/08/30/iOS%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8B%20GCD/"/>
    <id>https://zhengbuxuan.github.io/2017/08/30/iOS 多线程之 GCD/</id>
    <published>2017-08-30T15:00:00.000Z</published>
    <updated>2017-08-29T14:34:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h2><p>GCD 全称 Grand Central Dispatch</p>
<h2 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0.前言&quot;&gt;&lt;/a&gt;0.前言&lt;/h2&gt;&lt;p&gt;GCD 全称 Grand Central Dispatch&lt;/p&gt;
&lt;h2 id=&quot;1&quot;&gt;&lt;a href=&quot;#1&quot; clas
    
    </summary>
    
    
      <category term="iOS 多线程" scheme="https://zhengbuxuan.github.io/tags/iOS-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>iOS 多线程之 基础</title>
    <link href="https://zhengbuxuan.github.io/2017/08/29/iOS%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8B%20%E5%9F%BA%E7%A1%80/"/>
    <id>https://zhengbuxuan.github.io/2017/08/29/iOS 多线程之 基础/</id>
    <published>2017-08-29T12:00:00.000Z</published>
    <updated>2017-08-29T14:37:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p>关于多线程需要理解的一些基本的概念，为了防止打代码打到阿尔兹海默症，写下几个抖机灵的 🌰 …</p>
<h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><hr>
<h3 id="进程是什么"><a href="#进程是什么" class="headerlink" title="进程是什么"></a>进程是什么</h3><p>进程可以理解为一个正在运行的的程序，各个进程之间是相互独立的。</p>
<h3 id="线程是什么"><a href="#线程是什么" class="headerlink" title="线程是什么"></a>线程是什么</h3><p>线程是进程运行过程中的执行路径。每一个进程想要运行，都需要至少一个线程来确定代码的执行路径。</p>
<h3 id="然后呢…"><a href="#然后呢…" class="headerlink" title="然后呢…"></a>然后呢…</h3><p>举个栗子，手机里的微信和QQ在运行的时候，都是 iOS 系统中的进程。当你打开微信，给你的好基友发了一条 60 秒的语音信息，在你松开手之后，你想给他发一个表情 🙄️，所以你点击对话框输入 🙄️。<br>如果发语音和对话框输入必须按照顺序进行，也就是说这两个动作必须按顺序走，那么万一你所处环境网络状态很差，你就需要等这 60 秒语音完全用渣网络发完之后，你才能够点得动对话框来输入。我相信这个时候你已经把手机砸了…</p>
<h3 id="所以呢…"><a href="#所以呢…" class="headerlink" title="所以呢…"></a>所以呢…</h3><p>所以，这就是多线程的必要性啊…</p>
<h2 id="串行、并行和并发"><a href="#串行、并行和并发" class="headerlink" title="串行、并行和并发"></a>串行、并行和并发</h2><hr>
<h3 id="串行是什么"><a href="#串行是什么" class="headerlink" title="串行是什么"></a>串行是什么</h3><p>串行是指在同一时间点，只执行一个任务。比如只有一个 CPU，只能跑一条线程。</p>
<h3 id="并行是什么"><a href="#并行是什么" class="headerlink" title="并行是什么"></a>并行是什么</h3><p>并行是指在同一时间点，同时执行多个任务。比如有两个 CPU，可以同时跑两条线程。</p>
<h3 id="并发是什么"><a href="#并发是什么" class="headerlink" title="并发是什么"></a>并发是什么</h3><p>并发是指在同一时间点，有执行多个任务的能力。比如只有一个 CPU，但是可以非常快速地在两条线程上切来切去，看起来像是同时跑两条线程。</p>
<h3 id="用人话来说"><a href="#用人话来说" class="headerlink" title="用人话来说"></a>用人话来说</h3><p>冰雪消融，万物复苏，春天来了，又到了撸串的时候，我们能看到老板把 1 块羊肉穿进串，再把 1 块软骨穿进串，接着是 1 块彩椒… 循环 1…8 次，返回 2 串骨肉相连。这是串行。</p>
<p>又双到了撸串的时候，比较牛逼的老板手里可以拿 2 根签子，同时串 2 块羊肉，再是 2 块软骨，接着 2 块彩椒… 循环 1…4 次，返回 2 串骨头相连。这是并行。</p>
<p>又双叒是撸串的时候，发现老板一手握起两个签子… 大概是这样👇</p>
<center> —👊— </center>

<p>然后，穿 1 块羊肉，唰，手非常快速地转到另一头，穿 1 块羊肉，唰，手又非常快速地(🙄️)转到另一头… 循环 1…4 次，返回 2 串骨肉相连。这是并发。</p>
<h2 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h2><hr>
<h3 id="同步是什么"><a href="#同步是什么" class="headerlink" title="同步是什么"></a>同步是什么</h3><p>同步方法是完成任务之后返回，控制权交回给方法调用者，同时给结果。</p>
<h3 id="异步是什么"><a href="#异步是什么" class="headerlink" title="异步是什么"></a>异步是什么</h3><p>异步方法是任务开始就立即返回，控制权马上回归方法调用者，结果在需要时由掌权者去拿。</p>
<h3 id="人话"><a href="#人话" class="headerlink" title="人话"></a>人话</h3><p>同步就是我给你一张纸条，上面写着<code>买 7 杯冰美式给我</code>，你把纸条拿去，买了 7 杯冰美式回来，同时把纸条还给我。<br>异步就是我给你一张纸条，上面写着<code>买 7 杯冰美式放到前台</code>，你看完把纸条还给我，买了 7 杯冰美式放到了前台，我需要的时候再去前台拿。</p>
<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><hr>
<h3 id="顺序队列"><a href="#顺序队列" class="headerlink" title="顺序队列"></a>顺序队列</h3><p>- - - <code>任务1</code> <code>我是任务2</code> <code>我任务3</code> - - -</p>
<h3 id="并发队列"><a href="#并发队列" class="headerlink" title="并发队列"></a>并发队列</h3><p>- - -<code>任务1</code>- - - - - - - - - - - - - - - - - - - - -</p>
<p>- - - - - - - -<code>我是任务2</code> - - - - - - - - - - - -</p>
<p>- - - - - - - - - - - -<code>我任务3</code>- - - - - - - - - -</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><hr>
<h3 id="临界区"><a href="#临界区" class="headerlink" title="临界区"></a>临界区</h3><p>不能并发执行的代码。比如说你口袋里有 1 个硬币，左手知道有 1 个硬币所以想拿 1 个，同时右手也知道有 1 个硬币也想拿 1 个。如果左手拿了 1 个，右手就没得拿，但它又是被告知口袋里有 1 个硬币，然后就一直找一直找，最后，右手卒。反之，左手卒。</p>
<h3 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h3><p>能够并发执行或者多个线程同时调用的代码。比如说你口袋里有 1 个硬币，不能拿只能摸(…)，左手想摸 1 个硬币，同时右手也想摸 1 个硬币，然后它们都摸到了…</p>
<h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3><p>给临界区加锁，保证一次只能有一个线程调用。</p>
<h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>两个或两个以上的线程，因为要等待彼此任务的完成而陷入双方或多方均不能继续进行的困境。也就是经常在交叉路口四辆车互不退让的情况。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;关于多线程需要理解的一些基本的概念，为了防止打代码打到阿尔兹海默症，写下几个抖机灵的 🌰 …&lt;/p&gt;
&lt;h2 id=&quot;进程和线程
    
    </summary>
    
    
      <category term="iOS 多线程" scheme="https://zhengbuxuan.github.io/tags/iOS-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zhengbuxuan.github.io/2017/08/27/hello-world/"/>
    <id>https://zhengbuxuan.github.io/2017/08/27/hello-world/</id>
    <published>2017-08-27T15:00:23.000Z</published>
    <updated>2017-08-27T15:00:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS 多线程 NSThread Swift 3</title>
    <link href="https://zhengbuxuan.github.io/2017/08/27/iOS%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8B%20NSThread/"/>
    <id>https://zhengbuxuan.github.io/2017/08/27/iOS 多线程之 NSThread/</id>
    <published>2017-08-27T14:30:00.000Z</published>
    <updated>2017-08-29T14:34:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h2><p>NSThread 是 iOS 多线程当中最基础最轻量的多线程技术，但是需要自行管理线程的生命周期和同步问题，所以使用起来其实比较麻烦。<br>在 Swift 3 中，<strong>NSThread</strong> 已经被重命名为 <strong>Thread</strong>，很多的方法名也进行了修改。<br>下面就写一下自己学到的东西，当作学习笔记，以后可以翻看。如果有错误的地方望指正。</p>
<h2 id="1-创建线程和获取线程"><a href="#1-创建线程和获取线程" class="headerlink" title="1. 创建线程和获取线程"></a>1. 创建线程和获取线程</h2><ul>
<li>直接创建线程是最基本的创建方式，<strong>可以获取到线程线程对象</strong>，适合需要对线程对象进行操作的情况。需要<strong>手动启动</strong>。</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//直接创建</span></div><div class="line"><span class="keyword">let</span> thread = <span class="type">Thread</span>.<span class="keyword">init</span>(target: <span class="keyword">self</span>, selector: <span class="type">Selector</span>(<span class="string">"run"</span>), object: <span class="literal">nil</span>)</div><div class="line">thread.name = <span class="string">"firstThread"</span></div><div class="line">thread.start()</div></pre></td></tr></table></figure>
<ul>
<li>分离子线程，<strong>不能获取到线程对象</strong>，创建之后<strong>自启动</strong>。</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//分离子线程</span></div><div class="line"><span class="type">Thread</span>.detachNewThreadSelector(<span class="type">Selector</span>(<span class="string">"run"</span>), toTarget: <span class="keyword">self</span>, with: <span class="literal">nil</span>)</div></pre></td></tr></table></figure>
<ul>
<li>开启一条后台线程，同样<strong>不能获取到线程对象</strong>，创建后<strong>自启动</strong>。</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//后台线程</span></div><div class="line"><span class="keyword">self</span>.performSelector(inBackground: <span class="type">Selector</span>(<span class="string">"run"</span>), with: <span class="literal">nil</span>)</div></pre></td></tr></table></figure>
<ul>
<li>自定义线程类继承自Thread，对内部的方法进行重写封装，满足自定义需求。</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//自定义线程</span></div><div class="line"><span class="keyword">let</span> customThread = <span class="type">CustomThread</span>()</div><div class="line">customThread.start()</div></pre></td></tr></table></figure>
<ul>
<li>获取线程</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取主线程</span></div><div class="line"><span class="keyword">let</span> mainThread = <span class="type">Thread</span>.main</div><div class="line"></div><div class="line"><span class="comment">//获取当前线程</span></div><div class="line"><span class="keyword">let</span> currentThread = <span class="type">Thread</span>.current</div><div class="line"></div><div class="line"><span class="comment">//判断当前线程是否为主线程 返回类型为Bool</span></div><div class="line"><span class="keyword">let</span> currentIsMain = <span class="type">Thread</span>.isMainThread</div></pre></td></tr></table></figure>
<h2 id="2-线程状态"><a href="#2-线程状态" class="headerlink" title="2. 线程状态"></a>2. 线程状态</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//退出线程</span></div><div class="line"><span class="type">Thread</span>.exit()</div><div class="line"></div><div class="line"><span class="comment">//线程休眠给定时间</span></div><div class="line"><span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">1.0</span>)</div><div class="line"></div><div class="line"><span class="comment">//线程休眠至特定时间</span></div><div class="line"><span class="type">Thread</span>.sleep(until: <span class="type">Date</span>(timeIntervalSinceNow: <span class="number">1.0</span>))</div></pre></td></tr></table></figure>
<h2 id="3-线程同步与加锁"><a href="#3-线程同步与加锁" class="headerlink" title="3. 线程同步与加锁"></a>3. 线程同步与加锁</h2><p>关于同步和加锁，是多线程逃不掉的话题。Thread 中的线程同步一般用 NSCondition 来加锁实现。NSCondition(这个没有改名字…)主要使用的是 lock()、wait() 和 unlock()。<br>苹果的 API 文档是这么描述 NSCondition 的：</p>
<blockquote>
<p>The NSCondition class implements a condition variable whose semantics follow those used for POSIX-style conditions.<br>A condition object acts as both a lock and a checkpoint in a given thread.</p>
</blockquote>
<p>意思就是 NSCondition 所描述的条件对象在线程当中同时扮演锁(lock)和检查点(checkpoint)的角色。</p>
<blockquote>
<p>The lock protects your code while it tests the condition and performs the task triggered by the condition.<br>The checkpoint behavior requires that the condition be true before the thread proceeds with its task.<br>While the condition is not true, the thread blocks. It remains blocked until another thread signals the condition object.</p>
</blockquote>
<p>Lock 保护着你…… 的代码，以保证它们能按照逻辑来运行和满足条件时的触发执行。<br>线程要干活的时候需要 checkpoint 的条件为真，不然就阻塞罢工，直到其它线程给它发信号唤醒它。</p>
<p>下面是一个 🌰<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span> : <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//声明两个线程</span></div><div class="line">    <span class="keyword">var</span> thread_1: <span class="type">Thread</span>?</div><div class="line">    <span class="keyword">var</span> thread_2: <span class="type">Thread</span>?</div><div class="line"></div><div class="line">    <span class="comment">//创建两个 NSCondition</span></div><div class="line">    <span class="keyword">let</span> condition_1 = <span class="type">NSCondition</span>()</div><div class="line">    <span class="keyword">let</span> condition_2 = <span class="type">NSCondition</span>()</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">//两个线程的创建和 thread_1 的启动</span></div><div class="line">        thread_1 = <span class="type">Thread</span>(target: <span class="keyword">self</span>, selector: #selector(<span class="keyword">self</span>.forThreadOne) , object: <span class="literal">nil</span>)</div><div class="line">        thread_2 = <span class="type">Thread</span>(target: <span class="keyword">self</span>, selector: #selector(<span class="keyword">self</span>.forThreadTwo), object: <span class="literal">nil</span>)</div><div class="line">        thread_1?.start()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//thread_1 需要执行的方法</span></div><div class="line">    <span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">forThreadOne</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>...<span class="number">7</span> &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"Thread_1 is running for the #<span class="subst">\(i)</span> time(s)."</span>)</div><div class="line">            <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span> &#123;</div><div class="line">                <span class="comment">//判断 thread_2 是否在运行中，没运行就启动，如果在运行就发信号唤醒 thread_2</span></div><div class="line">                <span class="keyword">if</span> thread_2!.isExecuting &#123;</div><div class="line">                    condition_2.signal()</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    thread_2?.start()</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//锁住 thread_1</span></div><div class="line">                condition_1.lock()</div><div class="line">                condition_1.wait()</div><div class="line">                condition_1.unlock()</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Thread_1 says it is ended."</span>)</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//thread_2 需要执行的方法</span></div><div class="line">    <span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">forThreadTwo</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>...<span class="number">7</span> &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"Thread_2 is running for the #<span class="subst">\(i)</span> time(s)."</span>)</div><div class="line">            <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span> &#123;</div><div class="line">                <span class="comment">//发信号唤醒 thread_1</span></div><div class="line">                condition_1.signal()</div><div class="line">                <span class="comment">//锁住 thread_2</span></div><div class="line">                condition_2.lock()</div><div class="line">                condition_2.wait()</div><div class="line">                condition_2.unlock()</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Thread_2 says it is over."</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Swift 还可以使用 objc_sync_enter(obj: Any!) 和 objc_sync_exit(obj: Any!) 来加互斥锁，二者必须成对使用，把需要加锁的代码放在它们两个中间。<br>比如举一个买 7 本书的 🌰<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> amountOfBooks = <span class="number">7</span></div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</div><div class="line">        objc_sync_enter(<span class="keyword">self</span>)</div><div class="line">        <span class="keyword">let</span> current = amountOfBooks</div><div class="line">        <span class="keyword">if</span> current &gt; <span class="number">0</span> &#123;</div><div class="line">            amountOfBooks = current - <span class="number">1</span></div><div class="line">            <span class="built_in">print</span>(...)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">print</span>(...)</div><div class="line">            <span class="keyword">break</span></div><div class="line">        &#125;</div><div class="line">        objc_sync_exit(<span class="keyword">self</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>题外话</strong><br>Swift 需要成对使用的方法很多，多到可以写一个总结…… 先挖个坑</p>
</blockquote>
<h2 id="4-线程通信"><a href="#4-线程通信" class="headerlink" title="4. 线程通信"></a>4. 线程通信</h2><p>主要涉及到的方法有三个，当前线程的、主线程的、指定线程的。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//当前线程</span></div><div class="line"><span class="keyword">self</span>.perform(#selector(<span class="keyword">self</span>.run), with: <span class="literal">nil</span>)</div><div class="line"></div><div class="line"><span class="comment">//主线程</span></div><div class="line"><span class="keyword">self</span>.performSelector(onMainThread: #selector(<span class="keyword">self</span>.run), with: <span class="literal">nil</span>, waitUntilDone: <span class="literal">true</span>)</div><div class="line"></div><div class="line"><span class="comment">//指定线程</span></div><div class="line"><span class="keyword">self</span>.perform(#selector(<span class="keyword">self</span>.run), on: anotherThread, with: <span class="literal">nil</span>, waitUntilDone: <span class="literal">true</span>)</div></pre></td></tr></table></figure></p>
<p>举一个非常简单的小 🌰，在某个 ViewController的viewDidLoad 里，开启了一个子线程，运行 createNumber() 方法，声明 number 并赋值 7。<br>完了以后，使用 performSelector(onMainThread:…) 切换到主线程，并且跑起 printNumber() 方法，把 number 作为参数传入。<br>完成简单的线程间通信传值。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span> : <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="type">Thread</span>.detachNewThreadSelector(#selector(<span class="keyword">self</span>.createNumber), toTarget: <span class="keyword">self</span>, with: <span class="literal">nil</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">createNumber</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> number = <span class="number">7</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"Current Thread: <span class="subst">\(Thread.current)</span>"</span>)</div><div class="line">        <span class="keyword">self</span>.performSelector(onMainThread: #selector(<span class="keyword">self</span>.printNumber(number:)), with: number, waitUntilDone: <span class="literal">true</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">printNumber</span><span class="params">(number: Int)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"The number is: <span class="subst">\(number)</span>."</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>题外话 x 2</strong><br>#selector(@objc method) 是非常 Swift 3 的写法，要求传入的是一个 @objc 的方法。<br>使用 Selector(“methodWithoutParameter”) 或者 Selector(“methodWithParameter:”) 的话就不用在方法前加 @objc 标签，但是会爆黄……</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0. 前言&quot;&gt;&lt;/a&gt;0. 前言&lt;/h2&gt;&lt;p&gt;NSThread 是 iOS 多线程当中最基础最轻量的多线程技术，但是需要自行管理线程的生命周期和同步问题，所以使用起来
    
    </summary>
    
    
      <category term="iOS 多线程" scheme="https://zhengbuxuan.github.io/tags/iOS-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>iOS 多线程之 NSOperation</title>
    <link href="https://zhengbuxuan.github.io/2017/08/27/iOS%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8B%20NSOperation/"/>
    <id>https://zhengbuxuan.github.io/2017/08/27/iOS 多线程之 NSOperation/</id>
    <published>2017-08-27T12:52:15.000Z</published>
    <updated>2017-08-29T14:34:37.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="iOS 多线程" scheme="https://zhengbuxuan.github.io/tags/iOS-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
</feed>
